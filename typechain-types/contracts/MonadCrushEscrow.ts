/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MonadCrushEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimTokens"
      | "claims"
      | "createClaim"
      | "getClaimInfo"
      | "monToken"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawStuckTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimCreated" | "Claimed" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claims", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [BytesLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "monToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStuckTokens",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "monToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStuckTokens",
    data: BytesLike
  ): Result;
}

export namespace ClaimCreatedEvent {
  export type InputTuple = [
    claimCodeHash: BytesLike,
    amount: BigNumberish,
    recipient: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    claimCodeHash: string,
    amount: bigint,
    recipient: string,
    sender: string
  ];
  export interface OutputObject {
    claimCodeHash: string;
    amount: bigint;
    recipient: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    claimCodeHash: BytesLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    claimCodeHash: string,
    amount: bigint,
    recipient: string
  ];
  export interface OutputObject {
    claimCodeHash: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MonadCrushEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): MonadCrushEscrow;
  waitForDeployment(): Promise<this>;

  interface: MonadCrushEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimTokens: TypedContractMethod<
    [_claimCodeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  claims: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, boolean, string, string] & {
        amount: bigint;
        recipient: string;
        claimed: boolean;
        message: string;
        sender: string;
      }
    ],
    "view"
  >;

  createClaim: TypedContractMethod<
    [
      _claimCodeHash: BytesLike,
      _amount: BigNumberish,
      _recipient: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  getClaimInfo: TypedContractMethod<
    [_claimCodeHash: BytesLike],
    [
      [bigint, string, boolean, string, string] & {
        amount: bigint;
        recipient: string;
        claimed: boolean;
        message: string;
        sender: string;
      }
    ],
    "view"
  >;

  monToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawStuckTokens: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[_claimCodeHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, boolean, string, string] & {
        amount: bigint;
        recipient: string;
        claimed: boolean;
        message: string;
        sender: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createClaim"
  ): TypedContractMethod<
    [
      _claimCodeHash: BytesLike,
      _amount: BigNumberish,
      _recipient: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getClaimInfo"
  ): TypedContractMethod<
    [_claimCodeHash: BytesLike],
    [
      [bigint, string, boolean, string, string] & {
        amount: bigint;
        recipient: string;
        claimed: boolean;
        message: string;
        sender: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "monToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawStuckTokens"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ClaimCreated"
  ): TypedContractEvent<
    ClaimCreatedEvent.InputTuple,
    ClaimCreatedEvent.OutputTuple,
    ClaimCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ClaimCreated(bytes32,uint256,address,address)": TypedContractEvent<
      ClaimCreatedEvent.InputTuple,
      ClaimCreatedEvent.OutputTuple,
      ClaimCreatedEvent.OutputObject
    >;
    ClaimCreated: TypedContractEvent<
      ClaimCreatedEvent.InputTuple,
      ClaimCreatedEvent.OutputTuple,
      ClaimCreatedEvent.OutputObject
    >;

    "Claimed(bytes32,uint256,address)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
